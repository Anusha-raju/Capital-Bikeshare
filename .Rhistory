# Fit the linear model
model <- lm(ride_duration_mins ~ rideable_type + member_casual + start_time_period, data = capital_bikeshare_clean)
# View the model summary
summary(model)
# Fit the linear model
model <- lm(ride_duration_mins ~ rideable_type + member_casual + distance_miles+start_time_period, data = capital_bikeshare_clean)
# View the model summary
summary(model)
# Fit the linear model
model <- lm(ride_duration_mins ~ rideable_type + member_casual + distance_miles, data = capital_bikeshare_clean)
# View the model summary
summary(model)
# Fit the linear model
model <- lm(ride_duration_mins ~ member_casual + distance_miles + start_time_period, data = capital_bikeshare_clean)
# View the model summary
summary(model)
# Fit the linear model
model <- lm(ride_duration_mins ~ rideable_type  + distance_miles + start_time_period, data = capital_bikeshare_clean)
# View the model summary
summary(model)
# Fit the linear model
model <- lm(ride_duration_mins ~ (rideable_type + member_casual + distance_miles + start_time_period)^4, data = capital_bikeshare_clean)
# View the model summary
summary(model)
View(capital_bikeshare_clean)
# Fit the linear model
model <- glm(rideable_type ~ ride_duration_mins + member_casual + distance_miles + start_time_period, data = capital_bikeshare_clean)
rideable_typeLogit <- glm(rideable_type ~ member_casual + distance_miles + ride_duration_mins + start_time_period, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit)
rideable_typeLogit <- glm(rideable_type ~ (member_casual + distance_miles + ride_duration_mins + start_time_period)^4, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit)
rideable_typeLogit <- glm(rideable_type ~ member_casual  + ride_duration_mins + start_time_period, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit)
rideable_typeLogit <- glm(rideable_type ~ member_casual + distance_miles + ride_duration_mins , data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit)
rideable_typeLogit <- glm(rideable_type ~ member_casual + distance_miles + ride_duration_mins + start_time_period, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit)
rideable_typeModel <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period, data = capital_bikeshare_clean, method = "class")
print(summary(rideable_typeModel))
rpart.plot(rideable_typeModel, type = 3, extra = 1, main = "Classification Tree for Rideable type Prediction")
rideable_typeModel <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period, data = capital_bikeshare_clean, method = "class")
print(summary(rideable_typeModel))
rpart.plot(rideable_typeModel, type = 3, extra = 1, main = "Classification Tree for Rideable type Prediction")
print(rideable_typeModel$cptable)
plotcp(rideable_typeModel)
fold <- floor(runif(nrow(capital_bikeshare_clean),1,11))
capital_bikeshare_clean$fold <- fold
## the test set is just the first fold
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == 1,]
##exclude the first fold from the data here
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != 1,]
rideable_typeModel_fold <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period, data=train.set, method="class" )
fancyRpartPlot(rideable_typeModel_fold)
pred <- predict(rideable_typeModel_fold, test.set)
plot(pred,test.set$rideable_type, main="Predicted vs. Observed rideable_type", xlab="Tree classified rideable_type", ylab="Observed rideable_type")
cm = confusionMatrix( predict(rideable_typeModel, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
library(caret)
install.packages("caret")
library(caret)
cm = confusionMatrix( predict(rideable_typeModel, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
fold <- floor(runif(nrow(capital_bikeshare_clean),1,11))
capital_bikeshare_clean$fold <- fold
## the test set is just the first fold
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == 1,]
##exclude the first fold from the data here
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != 1,]
rideable_typeModel_fold <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period, data=train.set, method="class" )
fancyRpartPlot(rideable_typeModel_fold)
library(caret)
cm = confusionMatrix( predict(rideable_typeModel_fold, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
library(caret)
cm = confusionMatrix( predict(rideable_typeModel, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
fold <- floor(runif(nrow(capital_bikeshare_clean),1,11))
capital_bikeshare_clean$fold <- fold
## the test set is just the first fold
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == 1,]
##exclude the first fold from the data here
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != 1,]
rideable_typeModel_fold <- rpart(rideable_type ~ (ride_duration_mins+member_casual + distance_miles + start_time_period)^4, data=train.set, method="class" )
fold <- floor(runif(nrow(capital_bikeshare_clean),1,11))
capital_bikeshare_clean$fold <- fold
## the test set is just the first fold
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == 1,]
##exclude the first fold from the data here
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != 1,]
rideable_typeModel_fold <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period+(ride_duration_mins+member_casual), data=train.set, method="class" )
fancyRpartPlot(rideable_typeModel_fold)
library(caret)
cm = confusionMatrix( predict(rideable_typeModel, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
fold <- floor(runif(nrow(capital_bikeshare_clean),1,11))
capital_bikeshare_clean$fold <- fold
## the test set is just the first fold
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == 1,]
##exclude the first fold from the data here
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != 1,]
rideable_typeModel_fold <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period+(ride_duration_mins+distance_miles), data=train.set, method="class" )
fancyRpartPlot(rideable_typeModel_fold)
library(caret)
cm = confusionMatrix( predict(rideable_typeModel, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
library(caret)
cm = confusionMatrix( predict(rideable_typeModel, type = "class"), reference = capital_bikeshare_clean[, "rideable_type"] )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
fold <- floor(runif(nrow(capital_bikeshare_clean),1,11))
capital_bikeshare_clean$fold <- fold
## the test set is just the first fold
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == 1,]
##exclude the first fold from the data here
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != 1,]
rideable_typeModel_fold <- rpart(rideable_type ~ ride_duration_mins+member_casual + distance_miles + start_time_period, data=train.set, method="class" )
fancyRpartPlot(rideable_typeModel_fold)
gc()
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
options(scientific=T, digits = 3)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
library(dplyr)
library(ggplot2)
library(tidyr)
library(geosphere)
library(tidygeocoder)
library(caret)
library(lattice)
library(lubridate)
library(rattle)
library(rpart)
library(rpart.plot)
library(pROC)
library(rattle)
library(caret)
file_path <- file.path(getwd(), "202410-capitalbikeshare-tripdata.csv")
capital_bikeshare <- read.csv(file_path, header = TRUE)
colnames(capital_bikeshare)
capital_bikeshare <- capital_bikeshare %>%
filter(!is.na(end_lat))
# Calculate the distance for each row and add it as a new column (in miles)
capital_bikeshare$distance_miles <- mapply(function(lat1, lon1, lat2, lon2) {
distVincentySphere(c(lon1, lat1), c(lon2, lat2)) / 1000 * 0.621371
}, capital_bikeshare$start_lat, capital_bikeshare$start_lng, capital_bikeshare$end_lat, capital_bikeshare$end_lng)
file_path <- file.path(getwd(), "202410-capitalbikeshare-tripdata.csv")
capital_bikeshare <- read.csv(file_path, header = TRUE)
colnames(capital_bikeshare)
capital_bikeshare <- capital_bikeshare %>%
filter(!is.na(end_lat))
# Calculate the distance for each row and add it as a new column (in miles)
capital_bikeshare$distance_miles <- mapply(function(lat1, lon1, lat2, lon2) {
distVincentySphere(c(lon1, lat1), c(lon2, lat2)) / 1000 * 0.621371
}, capital_bikeshare$start_lat, capital_bikeshare$start_lng, capital_bikeshare$end_lat, capital_bikeshare$end_lng)
capital_bikeshare$started_at <- as.POSIXct(capital_bikeshare$started_at, format="%Y-%m-%d %H:%M:%OS")
capital_bikeshare$ended_at <- as.POSIXct(capital_bikeshare$ended_at, format="%Y-%m-%d %H:%M:%OS")
capital_bikeshare$ride_duration_mins <- as.numeric(difftime(capital_bikeshare$ended_at, capital_bikeshare$started_at, units = "mins"))
get_time_period <- function(time) {
hour <- as.numeric(format(time, "%H"))
if (hour >= 4 & hour < 6) {
return("Early Morning")
} else if (hour >= 6 & hour < 9) {
return("Morning")
} else if (hour >= 9 & hour < 12) {
return("Mid-Morning")
} else if (hour >= 12 & hour < 13) {
return("Midday")
} else if (hour >= 13 & hour < 17) {
return("Afternoon")
} else if (hour >= 17 & hour < 19) {
return("Evening")
} else if (hour >= 19 & hour < 21) {
return("Late Evening")
} else {
return("Night")
}
}
capital_bikeshare <- capital_bikeshare %>%
mutate(
start_time_period = sapply(started_at, get_time_period),
)
capital_bikeshare$day_type <- ifelse(wday(capital_bikeshare$started_at) %in% c(1, 7), "weekend", "weekday")
filtered_capital_bikeshare <- capital_bikeshare %>% select(rideable_type,member_casual,distance_miles,ride_duration_mins, start_time_period,day_type)
filtered_capital_bikeshare$rideable_type <- as.factor(filtered_capital_bikeshare$rideable_type)
filtered_capital_bikeshare$member_casual <- as.factor(filtered_capital_bikeshare$member_casual)
filtered_capital_bikeshare$start_time_period <- as.factor(filtered_capital_bikeshare$start_time_period)
filtered_capital_bikeshare$day_type <- as.factor(filtered_capital_bikeshare$day_type)
#for distance_miles
z_scores_DM <- scale(filtered_capital_bikeshare$distance_miles)
outliers <- which(abs(z_scores_DM) > 3)
capital_bikeshare_clean <- filtered_capital_bikeshare[-outliers, ]
# for ride_duration_mins
z_scores_RDM <- scale(capital_bikeshare_clean$ride_duration_mins)
outliers <- which(abs(z_scores_RDM) > 2)
capital_bikeshare_clean <- capital_bikeshare_clean[-outliers, ]
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
options(scientific=T, digits = 3)
rideable_typeLogit1 <- glm(rideable_type ~ member_casual , data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit1)
rideable_typeLogit2 <- glm(rideable_type ~ member_casual +distance_miles, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit2)
rideable_typeLogit3 <- glm(rideable_type ~ member_casual *distance_miles, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit3)
rideable_typeLogit4 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit4)
rideable_typeLogit5 <- glm(rideable_type ~ member_casual *distance_miles* ride_duration_mins, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit5)
rideable_typeLogit6 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+start_time_period, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit6)
rideable_typeLogit7 <- glm(rideable_type ~ member_casual *distance_miles* ride_duration_mins*start_time_period, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit7)
rideable_typeLogit8 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+start_time_period+day_type, data = capital_bikeshare_clean, family = "binomial")
summary(rideable_typeLogit8)
anova_result <- anova(rideable_typeLogit1, rideable_typeLogit2, rideable_typeLogit3, rideable_typeLogit4, rideable_typeLogit5, rideable_typeLogit6, rideable_typeLogit7, rideable_typeLogit8, test = "Chisq")
print(anova_result)
vif(rideable_typeLogit5)
library(car)
vif(rideable_typeLogit5)
vif(rideable_typeLogit4)
rideable_typeLogit9 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+(member_casual *distance_miles), data = capital_bikeshare_clean, family = "binomial")
vif(rideable_typeLogit9)
rideable_typeLogit9 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+(member_casual *distance_miles) + (member_casual*ride_duration_mins), data = capital_bikeshare_clean, family = "binomial")
vif(rideable_typeLogit9)
rideable_typeLogit10 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+(member_casual *distance_miles) + (member_casual*ride_duration_mins), data = capital_bikeshare_clean, family = "binomial")
vif(rideable_typeLogit10)
rideable_typeLogit9 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+(member_casual *distance_miles), data = capital_bikeshare_clean, family = "binomial")
vif(rideable_typeLogit9)
rideable_typeLogit11 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+(member_casual *distance_miles) + (distance_miles*ride_duration_mins), data = capital_bikeshare_clean, family = "binomial")
vif(rideable_typeLogit11)
anova_result <- anova(rideable_typeLogit1, rideable_typeLogit2, rideable_typeLogit3, rideable_typeLogit4, rideable_typeLogit5, rideable_typeLogit6, rideable_typeLogit7, rideable_typeLogit8,rideable_typeLogit9,rideable_typeLogit10,rideable_typeLogit11, test = "Chisq")
print(anova_result)
rideable_typeLogit10 <- glm(rideable_type ~ member_casual +distance_miles+ ride_duration_mins+(member_casual *distance_miles) + (member_casual*ride_duration_mins), data = capital_bikeshare_clean, family = "binomial")
vif(rideable_typeLogit10)
vif(rideable_typeLogit7)
vif(rideable_typeLogit2)
vif(rideable_typeLogit5)
vif(rideable_typeLogit7)
vif(rideable_typeLogit10)
vif(rideable_typeLogit2)
vif(rideable_typeLogit3)
View(capital_bikeshare_clean)
View(capital_bikeshare_clean)
predicted_probs <- predict(rideable_typeLogit2, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "electric_bike", "classic_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(capital_bikeshare_clean$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
predicted_probs <- predict(rideable_typeLogit2, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "classic_bike", "electric_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(capital_bikeshare_clean$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
predicted_probs <- predict(rideable_typeLogit2, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "classic_bike", "electric_bike")
predicted_classes <- factor(predicted_classes, levels = c("classic_bike", "electric_bike"))
actual_classes <- factor(capital_bikeshare_clean$rideable_type, levels = c("classic_bike", "electric_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
predicted_probs <- predict(rideable_typeLogit2, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "electric_bike", "classic_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(capital_bikeshare_clean$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
electric_bike_data <- capital_bikeshare_clean[capital_bikeshare_clean$rideable_type == "electric_bike", ]
classic_bike_data <- capital_bikeshare_clean[capital_bikeshare_clean$rideable_type == "classic_bike", ]
electric_bike_sample <- electric_bike_data[sample(nrow(electric_bike_data), 2000), ]
classic_bike_sample <- classic_bike_data[sample(nrow(classic_bike_data), 2000), ]
sampled_data <- rbind(electric_bike_sample, classic_bike_sample)
rideable_typeLogit_sample <- glm(rideable_type ~ member_casual +distance_miles, data = sampled_data, family = "binomial")
vif(rideable_typeLogit_sample)
predicted_probs <- predict(rideable_typeLogit_sample, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "electric_bike", "classic_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(capital_bikeshare_clean$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
predicted_probs <- predict(rideable_typeLogit_sample, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "electric_bike", "classic_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(sampled_data$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
rideable_typeLogit_sample <- glm(rideable_type ~ member_casual +distance_miles+ride_duration_mins, data = sampled_data, family = "binomial")
vif(rideable_typeLogit_sample)
predicted_probs <- predict(rideable_typeLogit_sample, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "electric_bike", "classic_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(sampled_data$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
rideable_typeLogit_sample <- glm(rideable_type ~ member_casual +distance_miles+ride_duration_mins+start_time_period, data = sampled_data, family = "binomial")
vif(rideable_typeLogit_sample)
predicted_probs <- predict(rideable_typeLogit_sample, type = "response")
# Classify based on a threshold of 0.5
predicted_classes <- ifelse(predicted_probs > 0.5, "electric_bike", "classic_bike")
predicted_classes <- factor(predicted_classes, levels = c("electric_bike", "classic_bike"))
actual_classes <- factor(sampled_data$rideable_type, levels = c("electric_bike", "classic_bike"))
# Create the confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
# Print the confusion matrix and statistics
print(conf_matrix)
# Extract accuracy
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy:", round(accuracy, 4)))
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
options(scientific=T, digits = 3)
library(rpart)
library(rpart.plot)
# K-fold cross-validation
set.seed(123)  # For reproducibility
fold <- floor(runif(nrow(capital_bikeshare_clean), 1, 5))
capital_bikeshare_clean$fold <- fold
# Create empty vectors to store results
accuracy_results <- c()
# Loop through each fold (1 to 10)
for (i in 1:5) {
# Create the test and training sets
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == i,]
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != i,]
# Train the decision tree model
Member_casual_tree <- rpart(member_casual ~ rideable_type + distance_miles + ride_duration_mins + start_time_period + day_type,
data = train.set,
method = "class")
# Visualize the tree (optional)
tree_vis <- rpart.plot(Member_casual_tree, type = 3, extra = 1, main = "Classification Tree for Member vs Casual Prediction")
# Print the summary of the tree
printcp(Member_casual_tree)
fancyRpartPlot(Member_casual_tree)
# Make predictions on the test set
pred_prob <- predict(Member_casual_tree, test.set, type = "prob")
# Convert probabilities to predicted classes (1 for 'Member', 2 for 'Casual')
pred_class <- ifelse(pred_prob[, 2] > 0.5, "casual", "member")  # Assuming 2nd class (casual) is the positive class
# Calculate the accuracy
accuracy <- sum(pred_class == test.set$member_casual) / nrow(test.set)
# Store the accuracy for this fold
accuracy_results[i] <- accuracy
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
options(scientific=T, digits = 3)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
file_path <- file.path(getwd(), "202410-capitalbikeshare-tripdata.csv")
capital_bikeshare <- read.csv(file_path, header = TRUE)
colnames(capital_bikeshare)
capital_bikeshare <- capital_bikeshare %>%
filter(!is.na(end_lat))
# Calculate the distance for each row and add it as a new column (in miles)
capital_bikeshare$distance_miles <- mapply(function(lat1, lon1, lat2, lon2) {
distVincentySphere(c(lon1, lat1), c(lon2, lat2)) / 1000 * 0.621371
}, capital_bikeshare$start_lat, capital_bikeshare$start_lng, capital_bikeshare$end_lat, capital_bikeshare$end_lng)
file_path <- file.path(getwd(), "202410-capitalbikeshare-tripdata.csv")
capital_bikeshare <- read.csv(file_path, header = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(geosphere)
library(tidygeocoder)
library(caret)
library(lattice)
library(lubridate)
library(rattle)
library(rpart)
library(rpart.plot)
library(car)
library(pROC)
library(rattle)
library(caret)
file_path <- file.path(getwd(), "202410-capitalbikeshare-tripdata.csv")
capital_bikeshare <- read.csv(file_path, header = TRUE)
colnames(capital_bikeshare)
capital_bikeshare <- capital_bikeshare %>%
filter(!is.na(end_lat))
# Calculate the distance for each row and add it as a new column (in miles)
capital_bikeshare$distance_miles <- mapply(function(lat1, lon1, lat2, lon2) {
distVincentySphere(c(lon1, lat1), c(lon2, lat2)) / 1000 * 0.621371
}, capital_bikeshare$start_lat, capital_bikeshare$start_lng, capital_bikeshare$end_lat, capital_bikeshare$end_lng)
capital_bikeshare$started_at <- as.POSIXct(capital_bikeshare$started_at, format="%Y-%m-%d %H:%M:%OS")
capital_bikeshare$ended_at <- as.POSIXct(capital_bikeshare$ended_at, format="%Y-%m-%d %H:%M:%OS")
capital_bikeshare$ride_duration_mins <- as.numeric(difftime(capital_bikeshare$ended_at, capital_bikeshare$started_at, units = "mins"))
get_time_period <- function(time) {
hour <- as.numeric(format(time, "%H"))
if (hour >= 4 & hour < 6) {
return("Early Morning")
} else if (hour >= 6 & hour < 9) {
return("Morning")
} else if (hour >= 9 & hour < 12) {
return("Mid-Morning")
} else if (hour >= 12 & hour < 13) {
return("Midday")
} else if (hour >= 13 & hour < 17) {
return("Afternoon")
} else if (hour >= 17 & hour < 19) {
return("Evening")
} else if (hour >= 19 & hour < 21) {
return("Late Evening")
} else {
return("Night")
}
}
capital_bikeshare <- capital_bikeshare %>%
mutate(
start_time_period = sapply(started_at, get_time_period),
)
capital_bikeshare$day_type <- ifelse(wday(capital_bikeshare$started_at) %in% c(1, 7), "weekend", "weekday")
filtered_capital_bikeshare <- capital_bikeshare %>% select(rideable_type,member_casual,distance_miles,ride_duration_mins, start_time_period,day_type)
filtered_capital_bikeshare$rideable_type <- as.factor(filtered_capital_bikeshare$rideable_type)
filtered_capital_bikeshare$member_casual <- as.factor(filtered_capital_bikeshare$member_casual)
filtered_capital_bikeshare$start_time_period <- as.factor(filtered_capital_bikeshare$start_time_period)
filtered_capital_bikeshare$day_type <- as.factor(filtered_capital_bikeshare$day_type)
#for distance_miles
z_scores_DM <- scale(filtered_capital_bikeshare$distance_miles)
outliers <- which(abs(z_scores_DM) > 3)
capital_bikeshare_clean <- filtered_capital_bikeshare[-outliers, ]
# for ride_duration_mins
z_scores_RDM <- scale(capital_bikeshare_clean$ride_duration_mins)
outliers <- which(abs(z_scores_RDM) > 2)
capital_bikeshare_clean <- capital_bikeshare_clean[-outliers, ]
library(rpart)
library(rpart.plot)
# K-fold cross-validation
set.seed(123)  # For reproducibility
fold <- floor(runif(nrow(capital_bikeshare_clean), 1, 5))
capital_bikeshare_clean$fold <- fold
# Create empty vectors to store results
accuracy_results <- c()
# Loop through each fold (1 to 10)
for (i in 1:5) {
# Create the test and training sets
test.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold == i,]
train.set <- capital_bikeshare_clean[capital_bikeshare_clean$fold != i,]
# Train the decision tree model
Member_casual_tree <- rpart(member_casual ~ rideable_type + distance_miles + ride_duration_mins + start_time_period + day_type,
data = train.set,
method = "class")
# Visualize the tree (optional)
tree_vis <- rpart.plot(Member_casual_tree, type = 3, extra = 1, main = "Classification Tree for Member vs Casual Prediction")
# Print the summary of the tree
printcp(Member_casual_tree)
fancyRpartPlot(Member_casual_tree)
# Make predictions on the test set
pred_prob <- predict(Member_casual_tree, test.set, type = "prob")
# Convert probabilities to predicted classes (1 for 'Member', 2 for 'Casual')
pred_class <- ifelse(pred_prob[, 2] > 0.5, "casual", "member")  # Assuming 2nd class (casual) is the positive class
# Calculate the accuracy
accuracy <- sum(pred_class == test.set$member_casual) / nrow(test.set)
# Store the accuracy for this fold
accuracy_results[i] <- accuracy
}
